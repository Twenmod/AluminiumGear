#include "precomp.h"
#include "ReflectionProbe.h"

#include "ObjectManager.h"
#include "Camera.h"

real::ReflectionProbe::ReflectionProbe(glm::vec3 _position, glm::vec3 _size, int _resolution) :
	m_RESOLUTION(_resolution)
{
	//Create textures

	m_cubemap.type = real::TEXTURE_TYPE_CUBEMAP;
	glGenTextures(1, &m_cubemap.id);
	glBindTexture(GL_TEXTURE_CUBE_MAP, m_cubemap.id);
	for (unsigned int i = 0; i < 6; ++i)
	{
		glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGBA, m_RESOLUTION, m_RESOLUTION, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
	}
	glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	m_position = _position;
	m_size = _size;
}

real::ReflectionProbe::~ReflectionProbe()
{
	glDeleteTextures(1, &m_cubemap.id);
}

void real::ReflectionProbe::Probe(real::ObjectManager& _drawList)
{
#if REFLECTIONS

	//Create Fbuffer
	GLuint fBuffer = 0;
	glGenFramebuffers(1, &fBuffer);
	glBindFramebuffer(GL_FRAMEBUFFER, fBuffer);

	GLuint depthRenderbuffer = 0;
	glGenRenderbuffers(1, &depthRenderbuffer);
	glBindRenderbuffer(GL_RENDERBUFFER, depthRenderbuffer);
	glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT24, m_RESOLUTION, m_RESOLUTION);
	glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depthRenderbuffer);

	glBindFramebuffer(GL_FRAMEBUFFER, fBuffer);
	glViewport(0, 0, m_RESOLUTION, m_RESOLUTION);

	printf("\x1B[36mSampling reflection probe");

	for (int i = 0; i < 6; ++i)
	{
		printf(".");
		glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, m_cubemap.id, 0);
		if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
		{
			std::cerr << "Framebuffer not complete for cubemap face " << i << std::endl;
			return;
		}

		int layer = i;
		glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, m_cubemap.id, 0);
		GLenum DrawBuffers[1] = { GL_COLOR_ATTACHMENT0 };
		glDrawBuffers(1, DrawBuffers);

		//Create a temporary camera at this location
		Camera probeCam;
		probeCam.Init();
		probeCam.SetPosition(m_position);

		//Switch case generated by CHATGPT
		switch (layer)
		{
			case 0: // +X (right)
				probeCam.SetCameraVectors(
					glm::vec3(1, 0, 0),   // Front
					glm::vec3(0, -1, 0),  // Up
					glm::vec3(0, 0, 1)   // Right
				);
				break;
			case 1: // -X (left)
				probeCam.SetCameraVectors(
					glm::vec3(-1, 0, 0),  // Front
					glm::vec3(0, -1, 0),  // Up
					glm::vec3(0, 0, -1)    // Right
				);
				break;
			case 2: // +Y (up)
				probeCam.SetCameraVectors(
					glm::vec3(0, 1, 0),   // Front
					glm::vec3(0, 0, 1),   // Up
					glm::vec3(1, 0, 0)    // Right
				);
				break;
			case 3: // -Y (down)
				probeCam.SetCameraVectors(
					glm::vec3(0, -1, 0),  // Front
					glm::vec3(0, 0, -1),  // Up
					glm::vec3(1, 0, 0)    // Right
				);
				break;
			case 4: // +Z (forward)
				probeCam.SetCameraVectors(
					glm::vec3(0, 0, 1),   // Front
					glm::vec3(0, -1, 0),  // Up
					glm::vec3(1, 0, 0)    // Right
				);
				break;
			case 5: // -Z (backward)
				probeCam.SetCameraVectors(
					glm::vec3(0, 0, -1),  // Front
					glm::vec3(0, -1, 0),  // Up
					glm::vec3(-1, 0, 0)   // Right
				);
				break;
		}
		glm::mat4 camProjection = glm::perspective(glm::radians(90.f), 1.f, m_NEARPLANE, m_FARPLANE);
		probeCam.SetProjection(camProjection);

		glClearColor(0, 0, 0, 1);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		_drawList.Draw(probeCam, false, true);
	}
	printf("\n\x1B[37m");

	//Reset and clean up
	glBindFramebuffer(GL_FRAMEBUFFER, 0);
	glBindRenderbuffer(GL_RENDERBUFFER, 0);
	glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);


	glDeleteFramebuffers(1,&fBuffer);
	glDeleteRenderbuffers(1, &depthRenderbuffer);

#endif
}